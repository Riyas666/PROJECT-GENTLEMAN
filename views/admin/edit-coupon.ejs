<%- include("../../views/partials/admin/header") %>
<style>
 .col-md-3 {
   padding: 20px;
   border: 1px solid #ddd;
   border-radius: 10px;
   margin: 10px;
 }


 .error-message {
   color: red;
   margin-top: 5px;
 }


 .form-label {
   margin-bottom: 8px;
 }


 .form-control {
   width: 100%;
   padding: 8px;
   margin-bottom: 10px;
   border: 1px solid #ccc;
   border-radius: 5px;
   box-sizing: border-box;
 }


 .d-grid {
   margin-top: 20px;
 }


 .btn-primary {
   background-color: #007bff;
   color: #fff;
   border: 1px solid #007bff;
   border-radius: 5px;
   padding: 10px 20px;
   cursor: pointer;
 }


 .btn-primary:hover {
   background-color: #0056b3;
   border-color: #0056b3;
 }
</style>


<section class="content-main">
 <div class="content-header">
   <div>
     <h2 class="content-title card-title">Coupons-Edit</h2>
   </div>
 </div>
 <div class="card">
   <div class="card-body">
     <div class="row">
       <div class="col-md-3">
         <form id="coupon-form" method="post" action="/admin/updateCoupon">
           <body onload="setDefaultStartDate(),setDefaultendDate()"></body>
           <input type="hidden" id="coupon-id" value="<%= findCoupon._id %>" />
           <div class="mb-4">
             <label for="coupon-name" class="form-label">Coupon Name</label>
             <input
               type="text"
               id="coupon-name"
               value="<%=findCoupon.name%>"
               name="couponName"
               placeholder="Type here"
               class="form-control"
             />
             <div id="error-coupon-name" class="error-message"></div>
           </div>


           <div>
             <label for="startingDate" class="form-label">Start Date</label>
             <input
               type="date"
               name="startDate"
               class="form-control"
               required="true"
               id="startingDate"
             />
             <div id="error-start-date" class="error-message"></div>
           </div>


           <div>
             <label for="expiringDate" class="form-label">End Date</label>
             <input
               type="date"
               name="endDate"
               class="form-control"
               id="expiringDate"
               required="true"
             />
             <div id="error-end-date" class="error-message"></div>
           </div>


           <div>
             <label for="offer-price" class="form-label">Offer Price</label>
             <input
               type="text"
               id="offer-price"
               name="offerPrice"
               placeholder="Type here"
               class="form-control"
               value="<%=findCoupon.offerPrice%>"
             />
             <div id="error-offer-price" class="error-message"></div>
           </div>


           <div>
             <label for="minimum-price" class="form-label">Minimum Price</label>
             <input
               type="text"
               name="minimumPrice"
               id="minimum-price"
               placeholder="Type here"
               class="form-control"
               value="<%=findCoupon.minimumPrice%>"
             />
             <div id="error-minimum-price" class="error-message"></div>
           </div>
           <div class="d-grid">
             <button  type="submit" class="btn btn-primary mt-20">Update Coupon</button>
           </div>
           <div id="err-msg" class="error-message"></div>
         </form>
       </div>
     </div>
   </div>
 </div>
</section>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
 function setDefaultStartDate() {
   const today = new Date();
   const year = today.getFullYear();
   let month = (today.getMonth() + 1).toString().padStart(2, "0");
   let day = today.getDate().toString().padStart(2, "0");
   document.getElementById("startingDate").value = `${year}-${month}-${day}`;
 }


 function setDefaultendDate() {
   const today = new Date();
   const tomorrow = new Date(today);
   tomorrow.setDate(today.getDate() + 1);


   const year = tomorrow.getFullYear();
   let month = (tomorrow.getMonth() + 1).toString().padStart(2, "0");
   let day = tomorrow.getDate().toString().padStart(2, "0");
   document.getElementById("expiringDate").value = `${year}-${month}-${day}`;
 }

 document.getElementById("coupon-form").addEventListener("submit", async function (event) {
  event.preventDefault();
  let isValid = true;

const couponId = document.getElementById("coupon-id").value;
const couponName = document.getElementById("coupon-name").value.trim();
const startDate = document.getElementById("startingDate").value;
const endDate = document.getElementById("expiringDate").value;
const offerPrice = document.getElementById("offer-price").value.trim();
const minimumPrice = document.getElementById("minimum-price").value.trim();

// Clear previous error messages
document.querySelectorAll(".error-message").forEach(el => el.textContent = "");

// Validation Checks
if (couponName === "") {
  displayCouponErrorMessage("error-coupon-name", "Please enter a coupon name");
  isValid = false;
}

if (!startDate) {
  displayCouponErrorMessage("error-start-date", "Please select a start date");
  isValid = false;
}

if (!endDate) {
  displayCouponErrorMessage("error-end-date", "Please select an end date");
  isValid = false;
}

if (startDate && endDate) {
  const start = new Date(startDate);
  const end = new Date(endDate);
  const today = new Date();

  if (end < start) {
    displayCouponErrorMessage("error-end-date", "End date must be after the start date");
    isValid = false;
  }

  if (end < today) {
    displayCouponErrorMessage("error-end-date", "End date must be in the future");
    isValid = false;
  }
}

if (!offerPrice || isNaN(offerPrice) || Number(offerPrice) <= 0) {
  displayCouponErrorMessage("error-offer-price", "Please enter a valid offer price greater than 0");
  isValid = false;
}

if (!minimumPrice || isNaN(minimumPrice) || Number(minimumPrice) <= 0) {
  displayCouponErrorMessage("error-minimum-price", "Please enter a valid minimum price greater than 0");
  isValid = false;
}

if (Number(offerPrice) > Number(minimumPrice)) {
  displayCouponErrorMessage("error-minimum-price", "Minimum price should be greater than offer price");
  isValid = false;
}

if (!isValid) return;


  const couponData = {
    couponId,
    couponName,
    startDate,
    endDate,
    offerPrice,
    minimumPrice,
  };

  try {
    const response = await fetch("/admin/updateCoupon", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(couponData),
    });

    const data = await response.json();

    if (data.success) {
      Swal.fire({
        icon: "success",
        title: "Success!",
        text: data.message,
      }).then(() => {
        window.location.href = "/admin/coupon";
      });
    } else {
      Swal.fire({
        icon: "error",
        title: "Error!",
        text: data.message,
      });
    }
  } catch (error) {
    console.error("Error updating coupon:", error);
    Swal.fire({
      icon: "error",
      title: "Error!",
      text: data.message,
    });
  }
});

function displayCouponErrorMessage(elementId, message) {
      const errorElement = document.getElementById(elementId);
      errorElement.innerText = message;
      errorElement.style.display = "block";
    }

</script>
<%- include("../../views/partials/admin/footer") %>




