 <%- include("../../views/partials/admin/header") %>

 <head>

   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
   <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/notiflix@3.2.6/dist/notiflix-3.2.6.min.css">
   <script src="https://cdn.jsdelivr.net/npm/notiflix@3.2.6/dist/notiflix-3.2.6.min.js"></script>

 </head>
 <style>
   .error-message {
     color: red;
   }

   .thumbnails-container {
     display: flex;
     overflow-x: auto;
   }

   .thumbnail {
     margin-right: 10px;
   }
 </style>
 <section class="content-main">
   <div class="row">
     <div class="col-9">
       <div class="content-header">
         <h2 class="content-title">Add New Product</h2>
       </div>
     </div>
     <!-- PRODUCT FORM SECTION  -->
     <div class="col-lg-6">
       <div class="card mb-4">
         <div class="card-body">
           <form method="post" action="/admin/products/addProducts" enctype="multipart/form-data" id="productForm" onsubmit="return validateForm(event)">
             <div class="mb-4">
               <label for="product_name" class="form-label">Product Name</label>
               <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name">
               <div id="productName-error" class="error-message"></div>
             </div>
             <div class="col-lg-4 mb-4">
               <label class="form-label">Brand</label>
               <select class="form-select border" name="brand">
                 <% for (let i = 0; i < brand.length; i++) { %>
                 <option value="<%= brand[i]._id %>">
                   <%= brand[i].brandName %>
                 </option>
                 <% } %>
               </select>
               <div id="brand-error" class="error-message"></div>
             </div>
             <!-- /////////////////////////// DESCRIPTION AREA //////////////////////////////// -->
             <div class="mb-4">
               <label class="form-label">Full description</label>
               <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"></textarea>
               <div id="description-error" class="error-message"></div>
             </div>

             <!-- /////////////////////////// PRICING AND QUANTITY AREA //////////////////////////////// -->

             <div class="row">
               <div class="col-lg-4">
                 <div class="mb-4">
                   <label class="form-label">Regular price</label>
                   <input placeholder="₹" name="regularPrice" type="text" class="form-control border">
                   <div id="regularPrice-error" class="error-message"></div>
                 </div>
               </div>
               <div class="col-lg-4">
                 <div class="mb-4">
                   <label class="form-label">Sale price</label>
                   <input placeholder="₹" name="salePrice" type="text" class="form-control border">
                 </div>
                 <div id="salePrice-error" class="error-message"></div>
               </div>
               <div class="col-lg-4">
               </div>
             </div>


             <!-- SIZE AND QUANTITY SECTION -->
             <div class="mb-4">
               <label class="form-label">Sizes and Quantities</label>
               <div id="sizeQuantityContainer">
                 <div class="row mb-2 align-items-center">
                   <div class="col-lg-6">
                     <input type="text" placeholder="Size" name="sizes[]" class="form-control border">
                   </div>
                   <div class="col-lg-4">
                     <input type="text" placeholder="Quantity" id="quantity" name="quantities[]" class="form-control border">
                   </div>
                   <div class="col-lg-2">
                     <button type="button" class="btn btn-sm btn-danger" onclick="removeRow(this)">Remove</button>
                   </div>
                 </div>
               </div>
               <button type="button" class="btn btn-sm btn-primary mt-2" onclick="addSizeQuantityRow()">Add More</button>
             </div>

             <!-- /////////////////////////// CATEGORY AREA //////////////////////////////// -->
             <div class="card mb-4">
               <div class="card-body">
                 <div class="row gx-2">
                   <div class="col-sm-6 mb-3">
                     <label class="form-label">Category</label>
                     <select class="form-select border" style="width: 150px;" name="category">
                       <% for(let i = 0; i < cat.length; i++) { %>
                       <option value="<%= cat[i]._id %>">
                         <%= cat[i].name %>
                       </option>
                       <% } %>
                     </select>
                     <div id="category-error" class="error-message"></div>
                   </div>
                 </div>
               </div>
             </div>

             <!-- /////////////////////////// IMAGE SELECTION AREA //////////////////////////////// -->

             <div class="card mb-2">
               <div class="card-header">
                 <h4>Choose images</h4>
               </div>
               <div class="border row">
                 <div id="addedImagesContainer" class="thumbnails-container"></div>
               </div>
               <div class="row">
                 <div class="card-body align-items-center" style="margin-bottom: 20px;">
                   <img src="" alt="" id="imgview1">
                   <input class="form-control" type="file" name="productImage" id="input1" accept="image/png, image/jpeg, image/jpg" onchange="viewImage1(event),viewImage(event, 1) ">
                   <div id="images-error" class="error-message"></div>
                 </div>
                 <div class="image-cropper d-flex align-items-center" style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                   <img src="" id="croppedImg1" alt="">
                   <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                 </div>
               </div>
               <div class="row">
                 <div class="card-body align-items-center" style="margin-bottom: 20px;">
                   <img src="" alt="" id="imgview2">
                   <input class="form-control" type="file" name="productImage" id="input2" accept="image/png, image/jpeg, image/jpg" onchange="viewImage2(event),viewImage(event, 2)">
                 </div>
                 <div class="image-cropper d-flex align-items-center" style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                   <img src="" id="croppedImg2" alt="">
                   <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
                 </div>
               </div>
               <div class="row">
                 <div class="card-body align-items-center" style="margin-bottom: 20px;">
                   <img src="" alt="" id="imgview3">
                   <input class="form-control" type="file" name="productImage" id="input3" accept="image/png, image/jpeg, image/jpg" onchange="viewImage3(event),viewImage(event, 3)">
                 </div>
                 <div class="image-cropper d-flex align-items-center" style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                   <img src="" id="croppedImg3" alt="">
                   <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
                 </div>
               </div>
               <div class="row">
                 <div class="card-body align-items-center" style="margin-bottom: 20px;">
                   <img src="" alt="" id="imgview4">
                   <input class="form-control" type="file" name="productImage" id="input4" accept="image/png, image/jpeg, image/jpg" onchange="viewImage4(event),viewImage(event, 4)">
                 </div>
                 <div class="image-cropper d-flex align-items-center" style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                   <img src="" id="croppedImg4" alt="">
                   <button type="button" id="saveButton4" class="btn-sm btn-primary">Save</button>
                 </div>
               </div>
             </div>
         </div>
         <div>
           <button class="btn btn-md rounded font-sm hover-up" type="submit" id="submit">
             Publish
           </button>
         </div>
         </form>
       </div>
     </div>
   </div>
   </div>
 </section>
 <script>
   let cropper = null;

   document.addEventListener('DOMContentLoaded', function() {

     const form = document.getElementById('productForm')
     const publishButton = document.getElementById('publishButton')

     publishButton.disabled = true;

     form.addEventListener('submit', function(event) {

       event.preventDefault();
       clearErrorMessages();

       if (validateForm()) {
         form.submit();
       } else {
         console.log("Form validation fails")
       }
     });

     const inputs = [
       document.getElementsByName('productName')[0],
       document.getElementById('descriptionid'),
       document.getElementsByName('brand')[0],
       document.getElementsByName('regularPrice')[0],
       document.getElementsByName('salePrice')[0],
       document.getElementsByName('category')[0],
       document.getElementById('quantity'),
       document.getElementById('input1')
     ];

     inputs.forEach(input => {
       input.addEventListener('click', (event) => {
         if (validateForm()) {
           publishButton.disabled = false;
         } else {
           publishButton.disabled = true;
         }
       });
     });
   });




   function validateForm() {

     clearErrorMessages();
     const name = document.getElementsByName('productName')[0].value;
     const description = document.getElementById('descriptionid').value;
     const brand = document.getElementsByName('brand')[0].value;
     const price = document.getElementsByName('regularPrice')[0].value;
     const saleprice = document.getElementsByName('salePrice')[0].value;
     const sizes = document.getElementsByName('sizes[]');
     const quantities = document.getElementsByName('quantities[]');
     const category = document.getElementsByName('category')[0].value;
     const images = document.getElementById('input1')
     console.log("Sizes:", Array.from(sizes).map(input => input.value));
     console.log("Quantities:", Array.from(quantities).map(input => input.value));
     let isValid = true
     if (name.trim() === "") {

       displayErrorMessage('productName-error', 'Please enter a product name.');
       isValid = false;
       setTimeout(() => {
         errorElement.style.display = "none";
       }, 3000)

     } else if (!/^[a-zA-Z0-9\s\-_]+$/.test(name.trim())) {
       displayErrorMessage('productName-error', 'Product name can only contain letters, numbers, spaces, hyphens and underscores.');
       isValid = false;
     }
     if (description.trim() === "") {
       displayErrorMessage('description-error', 'Please enter a product description.');
       isValid = false;
     }


     if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
       displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
       isValid = false;
     }
     if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
       displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
       isValid = false;
     }
     if (parseFloat(price) <= parseFloat(saleprice)) {
       displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
       isValid = false;
     }

     if (images.files.length === 0) {
       displayErrorMessage("images-error", 'Please select an image.');
       isValid = false;
     }
     return isValid;
   }

   //TO DISPLAY THE ERROR MESSAGES
   function displayErrorMessage(elementId, message) {
     var errorElement = document.getElementById(elementId);
     errorElement.innerText = message;
     errorElement.style.display = "block";
   }
   //TO CLEAR ALL THE ERROR MESSAGE
   function clearErrorMessages() {
     const errorElements = document.getElementsByClassName('error-message');
     Array.from(errorElements).forEach(element => {
       element.innerText = '';
     });
     const errorMessage = document.getElementById('errorMessage');
   }




   function viewImage1(event) {
     setImagePreview(event, 'imgview1');
   }

   function viewImage2(event) {
     setImagePreview(event, 'imgview2');
   }

   function viewImage3(event) {
     setImagePreview(event, 'imgview3');
   }

   function viewImage4(event) {
     setImagePreview(event, 'imgview4');
   }

   function setImagePreview(event, elementId) {
     document.getElementById(elementId).src = URL.createObjectURL(event.target.files[0]);
   }


   function viewImage(event, index) {
     let input = event.target;
     let reader = new FileReader();

     reader.onload = function() {
       let image = document.getElementById("imgview" + index);
       image.src = reader.result;

       if (cropper) {
         cropper.destroy();
       }

       cropper = new Cropper(image, {
         aspectRatio: 1,
         viewMode: 1,
         guides: true,
         background: false,
         autoCropArea: 1,
         zoomable: true
       });

       let cropperContainer = document.querySelector("#croppedImg" + index).parentNode;
       cropperContainer.style.display = 'block';

       let saveButton = document.querySelector('#saveButton' + index);
       saveButton.onclick = async function() {
         let canvas = cropper.getCroppedCanvas();
         let croppedImage = document.getElementById("croppedImg" + index);

         croppedImage.src = canvas.toDataURL('image/jpeg');

         canvas.toBlob(function(blob) {
           let fileName = 'cropped-' + Date.now() + '.jpg';
           let file = new File([blob], fileName, {
             type: 'image/jpeg'
           });

           let dataTransfer = new DataTransfer();
           dataTransfer.items.add(file);
           document.getElementById('input' + index).files = dataTransfer.files;

           cropperContainer.style.display = 'none';
           cropper.destroy();
           cropper = null;
         }, 'image/jpeg');
       };
     };
     reader.readAsDataURL(input.files[0]);
   }
   const selectedImages = []
   document.getElementById("input1").addEventListener("change", handleFileSelect)

   function handleFileSelect(event) {
     const addedImagesContainer = document.getElementById("addedImagesContainer")
     addedImagesContainer.innerHTML = ""
     const files = event.target.files
     for (let i = 0; i < files.length; i++) {
       const file = files[i]
       selectedImages.push(files)
       const thumbnail = document.createElement("div")
       thumbnail.classList.add("thumbnail")
       const img = document.createElement("img");
       img.src = URL.createObjectURL(file)
       img.alt = "thumbnail";
       img.style.width = "50px";
       img.style.height = "auto";
       const removeIcon = document.createElement("span");
       removeIcon.classList.add("remove-icon");
       removeIcon.innerHTML = "&times;";
       removeIcon.addEventListener("click", function() {
         const index = selectedImages.indexOf(file);
         if (index !== -1) {
           selectedImages.splice(index, 1)
         }
         thumbnail.remove()
       })
       thumbnail.appendChild(img);
       thumbnail.appendChild(removeIcon)
       addedImagesContainer.appendChild(thumbnail)
     }
   }




   function getSizesAndQuantities() {
     const sizes = [];
     const quantityFields = document.querySelectorAll('[name="sizes[]"]');
     const quantityValues = document.querySelectorAll('[name="quantities[]"]');

     for (let i = 0; i < quantityFields.length; i++) {
       sizes.push({
         size: quantityFields[i].value,
         quantity: parseInt(quantityValues[i].value, 10)
       });
     }
     return sizes;
   }

   function addSizeQuantityRow() {
     const container = document.getElementById('sizeQuantityContainer');

     const currentRows = container.getElementsByClassName('row').length;

     if (currentRows >= 3) {
      Notiflix.Notify.failure('You can only add up to 3 rows.');
       return;
     }


     const row = document.createElement('div');
     row.classList.add('row', 'mb-2', 'align-items-center');
     row.innerHTML = `
            <div class="col-lg-6">
                <input type="text" placeholder="Size" name="sizes[]" class="form-control border">
            </div>
            <div class="col-lg-4">
                <input type="text" placeholder="Quantity" name="quantities[]" class="form-control border">
            </div>
            <div class="col-lg-2">
                <button type="button" class="btn btn-sm btn-danger" onclick="removeRow(this)">Remove</button>
            </div>
        `;
     container.appendChild(row);
   }

   function removeRow(button) {
     button.closest('.row').remove();
   }
 </script>

 <%- include("../../views/partials/admin/footer") %>