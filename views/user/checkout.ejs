<%-include("../../views/partials/user/header")%>
<style>
.existing-addresses {
  width: 25rem;
  max-height: 300px; 
  overflow-y: auto; 
  border: 1px solid #ddd;
  padding: 10px; 
  background-color: #f9f9f9;
}

.address-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.address-item {
  margin-bottom: 15px;
  padding: 10px;
  border-bottom: 1px solid #ddd;
}
.add-btnn {
    background-color:#D3B382;
    color: white;
    padding: 0.625rem 1.25rem;
    border-radius: 0.25rem;
    border: none;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  .add-btnn:hover {
    background-color:#e0b370;
  }
  .modal-overlay {
    display: none;
    position: fixed;
    padding: 20px;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    backdrop-filter: blur(4px);
  }

  .modal-overlay.active {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .address-modal {
    max-height: 90vh;
    overflow-y: auto;
    padding: 1.5rem;
    background: white;
    border-radius: 12px;
    padding: 2rem;
    width: 90%;
    max-width: 600px;
    position: relative;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    transform: translateY(-20px);
    opacity: 0;
    transition: all 0.3s ease-out;
  }

  .modal-overlay.active .address-modal {
    transform: translateY(0);
    opacity: 1;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #eee;
  }

  .modal-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #666;
    transition: color 0.2s;
  }

  .modal-close:hover {
    color: #333;
  }
 

</style>
    <main class="main">
      <section class="breadcrumb">
        <ul class="breadcrumb__list flex container">
          <li><a href="/home" class="breadcrumb__link">Home</a></li>
          <li><span class="breadcrumb__link">></span></li>
          <li><a href="/shop" class="breadcrumb__link">Shop</a></li>
          <li><span class="breadcrumb__link">></span></li>
          <li><a href="/cart" class="breadcrumb__link">Cart</a></li>
          <li><span class="breadcrumb__link">></span></li>
          <li><span class="breadcrumb__link">Checkout</span></li>
        </ul>
      </section>
      <section class="checkout section--lg">
        <div class="checkout__container container grid">
          <div class="checkout__group">
            <section class="checkout__group">
              <h3 class="section__title">Shipping Address</h3>  
                
                <div class="existing-addresses">
                  <div class="button-container">
                    <button class="add-btnn ">Add New Address</button>
                  </div>
                  <form class="address-form">
                    <ul class="address-list">
                      <% addresses.forEach(address => { %>
                      <li class="address-item">
                        <label class="address-label flex">
                          <input 
                            type="radio" 
                            name="deliveryAddress" 
                            value="<%= address.id %>" 
                            class="address-radio" 
                           
                          />
                          <div class="address-details">
                            <address class="address-details">
                              <strong><%= address.name %></strong><br />
                              <%= address.city %>, <%= address.landmark %><br />
                              <%= address.pincode %>, <%= address.state %><br />
                              Phone: <%= address.phonenumber %>
                            </address>
                          </div>
                        </label>
                      </li>
                      <% }); %>
                    </ul>
                  </form>
                </div>
                <div class="cart__coupon">
                  <h3 class="section__title">Apply Coupon</h3>
                  <form id="couponForm" class="coupon__form form grid">
                    <div class="form__group grid">
                      <select id="couponSelect" class="form__input">
                        <option value="">Select a Coupon</option>
                    <% coupons.forEach(coupon => { %>
                          <option value="<%= coupon._id %>" data-discount="<%= coupon.offerPrice %>" data-min-price="<%= coupon.minimumPrice %>">
                            <%= coupon.name %> - ₹<%= coupon.offerPrice %> OFF (Min: ₹<%= coupon.minimumPrice %>)
                          </option>
                        <% }) %>
                      </select>
                      <div class="form__btn">
                        <button type="button" id="applyCouponBtn" class="btn flex btn--sm">
                          <i class="fi-rs-label"></i> Apply
                        </button>
                      </div>
                    </div>
                  </form>
                  <p id="couponMessage" style="color: green; display: none;">Coupon applied successfully!</p>
                </div>






                <div class="modal-overlay" id="addressModal">
                  <div class="address-modal">
                    <div class="modal-header">
                      <h2>Add New Address</h2>
                      <button class="modal-close">&times;</button>
                    </div>
                    <div class="address-form-container">
                      <form method="post" id="addaddressform">
                        <div class="mb-3">
                          <label for="fullname" class="form-label">Full Name</label>
                          <input type="text" class="form-control" id="addname" name="name" placeholder="Enter your full name" />
                          <span class="error-message" id="addnameError"></span>
                        </div>
      
                        <div class="mb-3">
                          <label for="city" class="form-label">City</label>
                          <input type="text" class="form-control" id="city" name="city" placeholder="Enter your city" />
                          <span class="error-message" id="cityError"></span>
                        </div>
      
                        <div style="display: flex; gap: 1rem; align-items: flex-start;">
                          <span class="mb-3" style="flex: 1;">
                            <label for="state" class="form-label" style="display: flex;">State</label>
                            <select id="state" name="state" class="form-select">
                              <option value="{{state}}" elected>state</option>
                              <option value="Andhra Pradesh">Andhra Pradesh</option>
                              <option value="Arunachal Pradesh">Arunachal Pradesh</option>
                              <option value="Assam">Assam</option>
                              <option value="Bihar">Bihar</option>
                              <option value="Chhattisgarh">Chhattisgarh</option>
                              <option value="Goa">Goa</option>
                              <option value="Gujarat">Gujarat</option>
                              <option value="Haryana">Haryana</option>
                              <option value="Himachal Pradesh">Himachal Pradesh</option>
                              <option value="Jharkhand">Jharkhand</option>
                              <option value="Karnataka">Karnataka</option>
                              <option value="Kerala">Kerala</option>
                              <option value="Madhya Pradesh">Madhya Pradesh</option>
                              <option value="Maharashtra">Maharashtra</option>
                              <option value="Manipur">Manipur</option>
                              <option value="Meghalaya">Meghalaya</option>
                              <option value="Mizoram">Mizoram</option>
                              <option value="Nagaland">Nagaland</option>
                              <option value="Odisha">Odisha</option>
                              <option value="Punjab">Punjab</option>
                              <option value="Rajasthan">Rajasthan</option>
                              <option value="Sikkim">Sikkim</option>
                              <option value="Tamil Nadu">Tamil Nadu</option>
                              <option value="Telangana">Telangana</option>
                              <option value="Tripura">Tripura</option>
                              <option value="Uttar Pradesh">Uttar Pradesh</option>
                              <option value="Uttarakhand">Uttarakhand</option>
                              <option value="West Bengal">West Bengal</option>
                              <option value="Chandigarh">Chandigarh</option>
                              <option value="Delhi">Delhi</option>
                              <option value="Jammu and Kashmir">Jammu and Kashmir</option>
                              <option value="Ladakh">Ladakh</option>
                            </select>
                            <span class="error-message" id="stateError"></span>
                          </span>
                          <span class="mb-3" style="flex: 1;">
                            <label for="postalcode" class="form-label" style="display: flex;">Postal Code</label>
                            <input type="text" class="form-control" id="pincode" name="pincode" placeholder="Enter your postal code" />
                            <span class="error-message" id="pincodeError"></span>
                          </span>
                        </div>
                        <div class="mb-3">
                          <label for="landmark" class="form-label">Landmark</label>
                          <input type="text" class="form-control" id="landmark" name="landmark" placeholder="Enter a landmark " />
                          <span class="error-message" id="landmarkError"></span>
                        </div>
                        <div class="mb-3">
                          <label for="phonenumber" class="form-label">Phone Number</label>
                          <input type="text" class="form-control" id="addphone" name="phonenumber" placeholder="Enter your phone number" />
                          <span class="error-message" id="addphoneError"></span>
                        </div>
                        <div style="display: flex; gap: 1rem; align-items: flex-start;">
                          <span class="mb-3" style="flex: 1;">
                            <label for="addressType" class="form-label" style="display: flex;">Address Type</label>
                            <select name="addressType" id="addressType" class="form-select">
                              <option value="--none--" selected>--none--</option>
                              <option value="Home Address">Home Address</option>
                              <option value="Office Address">Office Address</option>
                            </select>
                            <span class="error-message" id="addressTypeError"></span>
                          </span>
                        </div>
                        <button type="submit" class="btn btn-primary">Submit</button>
                      </form>
                    </div>
                  </div>
                </div>
              </section>
              
          </div>
          <div class="checkout__group">
            <h3 class="section__title">Cart Totals</h3>
            <table class="order__table">
              <thead>
                <tr>
                  <th colspan="2">Products</th>
                  <th>size</th>
                  <th>price</th>
                  <th>Total</th>
                </tr>
              </thead>

              <tbody>
                <%cart.forEach(items => {%>
                <tr>
                  <td >
                    <img
                      src="/uploads/product-images/<%=items.productId.productImage[0]%>"
                      alt="sdfd"
                      class="order__img"
                    />
                  </td>
                  <td >
                    <h3 class="table__title"><%=items.productId.productName%></h3>
                    <p class="table__quantity">x <%=items.quantity%></p>
                  </td>
                  <td><span><%=items.size%></span></td>
                  <td><span>₹<%=items.price%></span></td>
                  <td><span class="table__price">₹<%=items.totalPrice%></span></td>
                </tr>
                <%})%>
              
                <tr>
                  <td colspan="2"><span class="order__subtitle">Subtotal</span></td>
                  <td colspan="3"><span class="table__price">₹<%=totalAmount %></span></td>
                </tr>
                <tr>
                  <td colspan="2"><span class="order__subtitle">Shipping</span></td>
                  <td colspan="3">
                    <span class="table__price">Free Shipping</span>
                  </td>
                </tr>
                <tr>
                  <td colspan="2"><span class="order__subtitle">Discount</span></td>
                  <td colspan="3">
                    <span class="table__price" id="discountAmount">₹0</span>
                  </td>
                </tr>
                <tr>
                  <td colspan="2"><span class="order__subtitle">Total</span></td>
                  <td colspan="3">
                    <span class="order__grand-total" id="finalAmount">₹<%=totalAmount %></span>
                  </td>
                </tr>
                
              </tbody>
            </table>


            <div class="toast align-items-center text-white bg-primary border-0" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                  <div class="toast-body">
                    Hello, world! This is a toast message.
                  </div>
                  <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
              </div>



            <div class="payment__methods">
              <h3 class="checkout__title payment__title">Payment</h3>
              <div class="payment__option flex">
                <input
                  type="radio"
                  name="radio"
                  id="l1"
                  checked
                  class="payment__input"
                />
                <label for="l1" class="payment__label"
                  >Cash On Delivery</label
                >
              </div>
              <div class="payment__option flex">
                <input
                  type="radio"
                  name="radio"
                  id="l2"
                  class="payment__input"
                />
                <label for="l2" class="payment__label">Wallet Payment</label>
              </div>
              <div class="payment__option flex">
                <input
                  type="radio"
                  name="radio"
                  id="l3"
                  class="payment__input"
                />
                <label for="l3" class="payment__label">Razorpay</label>
              </div>
            </div>
            <button id="placeOrderBtn" class="btn btn--md">Place Order</button>
          </div>
        </div>
      </section> 

      


      

      <%-include("../../views/partials/user/footer")%>

       <script>
//         document.addEventListener('DOMContentLoaded', () => {
//     const placeOrderBtn = document.getElementById('placeOrderBtn');

//     if (placeOrderBtn) {
//         placeOrderBtn.addEventListener('click', async () => {
//             try {
               
                
//                 const selectedAddressId =  document.querySelector('input[name="deliveryAddress"]:checked')?.value
               
//                 const cartItems = getCartItems();
//                 const selectedPaymentMethod = document.querySelector('input[name="radio"]:checked')?.id;
                
//                 console.log("haii thi  the select address id", selectedPaymentMethod)
//                 if (!cartItems || cartItems.length === 0) {
//                     return Swal.fire({
//                         title: 'Cart Empty',
//                         text: 'Your cart is empty. Please add items to the cart before placing an order.',
//                         icon: 'error',
//                         button: 'OK',
//                     });
//                 }

//                 if (!selectedAddressId) {
//                     return Swal.fire({
//                         title: 'Address Missing',
//                         text: 'Please select a shipping address before placing an order.',
//                         icon: 'error',
//                         button: 'OK',
//                     });
//                 }

//                 if (!selectedPaymentMethod) {
//                     return Swal.fire({
//                         title: 'Payment Method Missing',
//                         text: 'Please select a payment method to proceed.',
//                         icon: 'error',
//                         button: 'OK',
//                     });
//                 }

//                 const response = await fetch('/place', {
//                     method: 'POST',
//                     headers: {
//                         'Content-Type': 'application/json',
//                     },
//                     body: JSON.stringify({
//                       addressId: selectedAddressId,
//                         items: cartItems,
//                         paymentMethod: selectedPaymentMethod,
//                     }),
//                 });

//                 const data = await response.json();
//                 console.log("Order Response Data:", data);
//                 if (data.success) {
//                     Swal.fire({
//                         title: 'Order Placed Successfully!',
//                         text: data.message,
//                         icon: 'success',
//                         showConfirmButton: false,
//                         timer: 2000,
//                     }).then(() => {
//                         window.location.href = data.redirectUrl;
//                     });
//                 } else {
//                     Swal.fire({
//                         title: 'Order Failed',
//                         text: data.message,
//                         icon: 'error',
//                         button: 'Try Again',
//                     });
//                 }
//             } catch (error) {
//                 console.error('Error placing order:', error);
//                 Swal.fire({
//                     title: 'Error',
//                     text: 'An unexpected error occurred while placing the order. Please try again.',
//                     icon: 'error',
//                     button: 'OK',
//                 });
//             }
//         });
//     }
// });








document.addEventListener('DOMContentLoaded', () => {
  const placeOrderBtn = document.getElementById('placeOrderBtn');

  placeOrderBtn.addEventListener('click', async function () {
    // Get the selected payment method
    const paymentMethod = document.querySelector('input[name="radio"]:checked').id;

    // Get cart items
    const cartItems = getCartItems();  // Assuming this function fetches the cart items

    if (!cartItems || cartItems.length === 0) {
      return Swal.fire({
        title: 'Cart Empty',
        text: 'Your cart is empty. Please add items to the cart before placing an order.',
        icon: 'error',
        button: 'OK',
      });
    }

    // Get the selected delivery address
    const selectedAddressId = document.querySelector('input[name="deliveryAddress"]:checked')?.value;
    if (!selectedAddressId) {
      return Swal.fire({
        title: 'Address Missing',
        text: 'Please select a shipping address before placing the order.',
        icon: 'error',
        button: 'OK',
      });
    }

    if (paymentMethod === 'l1') {
      try {
        const response = await fetch('/place', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            paymentMethod: 'COD',
            addressId: selectedAddressId,
          }),
        });

        const data = await response.json();

        if (data.success) {
                    Swal.fire({
                        title: 'Order Placed Successfully!',
                        text: data.message,
                        icon: 'success',
                        showConfirmButton: false,
                        timer: 2000,
                    }).then(() => {
                        window.location.href = data.redirectUrl;
                    });
                } else {
                    Swal.fire({
                        title: 'Order Failed',
                        text: data.message,
                        icon: 'error',
                        button: 'Try Again',
                    });
                }
      } catch (error) {
        console.error('Error placing order with COD:', error);
        alert('An error occurred while placing the order. Please try again.');
      }
    } else if (paymentMethod === 'l2') {
     
      try {
        const response = await fetch('/place', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            paymentMethod: 'Wallet',
            addressId: selectedAddressId,
            items: cartItems,
          }),
        });

        const data = await response.json();

        if (data.success) {
          window.location.href = '/order-success';
        } else {
          alert('Failed to place the order. Please try again.');
        }
      } catch (error) {
        console.error('Error placing order with Wallet:', error);
        alert('An error occurred while placing the order. Please try again.');
      }
    } else if (paymentMethod === 'l3') {
     const amount =  Number('<%=totalAmount%>') * 100;
      try {
        const response = await fetch('/create-order', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            amount: amount, 
            addressId: selectedAddressId,
            paymentMethod:"Razorpay"
          }),
        });
        console.log("2");
        if (!response.ok) {
          const errorData = await response.json();
    Swal.fire({
        title: 'Order Failed',
        text: errorData.message || 'Failed to create the order.',
        icon: 'error',
    });
    return;
}
        console.log("3")

        const order = await response.json();
       
        console.log(`orderrrrrrrrr:${order}`)
        console.log("4")

        if (!order ||  !order.razorpayOrder || !order.razorpayOrder.id ) {
          return Swal.fire({
            title: 'Order Failed',
            text: 'Failed to create the order. Please try again.',
            icon: 'error',
            button: 'OK',
          });
        }
        console.log("5")
        // 2️⃣ Initialize Razorpay Payment Modal
        const options = {
          key: 'rzp_test_rry7kkHDgndyCv', // Your Razorpay API Key
          amount: order.amount, // Amount in paise
          currency: 'INR',
          order_id: order.razorpayOrder.id, // Generated Order ID
          name: 'Your Store',
          description: 'Payment for your order',
          handler: async function (response) {
            console.log("6")
            try {
              // 3️⃣ Verify payment on the backend
              const verifyResponse = await fetch('/verify-payment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  paymentId: response.razorpay_payment_id,
                  orderId: response.razorpay_order_id,
                  signature: response.razorpay_signature,
                }),
              });
              console.log("7")
              const verifyData = await verifyResponse.json();
              console.log("8")

              if (verifyData.success) {
                    Swal.fire({
                        title: 'Order Placed Successfully!',
                        text: verifyData.message,
                        icon: 'success',
                        showConfirmButton: false,
                        timer: 2000,
                    }).then(() => {
                        window.location.href = '/order/success';
                    });
                // ✅ Payment successful, redirect to success page
              } else {
                alert('Payment verification failed. Please try again.');
              }
            } catch (error) {
              console.error('Error verifying Razorpay payment:', error);
              alert('An error occurred while verifying the payment. Please try again.');
            }
          },
          prefill: {
            name: '<%=user.name%>',
            email: '<%=user.email%>',
            contact: '<%=user.phone%>',
          },
          theme: { color: '#3399cc' },
        };

        const rzp = new Razorpay(options);
        rzp.open();
      } catch (error) {
        console.error('Error creating order with Razorpay:', error);
        alert('An error occurred while creating the order. Please try again.');
      }
    } else {
      alert('Please select a payment method.');
    }
  });





function getCartItems() {
  const cartItems = [];
  
  document.querySelectorAll(".order__table tbody tr").forEach((row) => {
    if (!row.querySelector(".order__img")) return;

    const productId = row.querySelector("img").getAttribute("src").split("/").pop(); 
    const quantityText = row.querySelector(".table__quantity")?.textContent || "";
    const quantity = parseInt(quantityText.replace("x ", "").trim()) || 0; 
    const size = row.querySelector("td:nth-child(3) span")?.textContent?.trim() || "N/A"; 
    const priceText = row.querySelector("td:nth-child(4) span")?.textContent || "₹0";
    const price = parseFloat(priceText.replace("₹", "").trim()) || 0; 
    const totalPriceText = row.querySelector(".table__price")?.textContent || "₹0";
    const totalPrice = parseFloat(totalPriceText.replace("₹", "").trim()) || 0; 

    if (productId && quantity > 0) {
      cartItems.push({
        productId,
        quantity,
        size,
        price,
        totalPrice,
      });
    }
  });

  return cartItems;
}




})


//////ADDRESS PART//////////////

document.addEventListener('DOMContentLoaded', function() {
    const addButton = document.querySelector('.add-btnn');
    const modal = document.getElementById('addressModal');
    const closeButton = modal.querySelector('.modal-close');
    const form = document.getElementById('addaddressform');

  
    function resetForm() {
      form.reset(); 

     
      const errorElements = document.querySelectorAll('.error-message');
      errorElements.forEach(error => {
        error.textContent = '';
      });
    }
    addButton.addEventListener('click', function() {
      modal.classList.add('active');
      document.body.style.overflow = 'hidden';
    });

    function closeModal() {
      modal.classList.remove('active');
      document.body.style.overflow = '';
      resetForm();
    }

    closeButton.addEventListener('click', closeModal);

    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        closeModal();
      }
    });

    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && modal.classList.contains('active')) {
        closeModal();
      }
    });
  });
  document.getElementById("addaddressform").addEventListener("submit", async function(e) {
    e.preventDefault();

    const addname = document.getElementById("addname").value.trim();
    const city = document.getElementById("city").value.trim();
    const state = document.getElementById("state").value
    const pincode = document.getElementById("pincode").value.trim();
    const landmark = document.getElementById("landmark").value.trim();
    const addphone = document.getElementById("addphone").value.trim();
    const addressType = document.getElementById("addressType").value
    const addnameError = document.getElementById("addnameError");
    const cityError = document.getElementById("cityError");
    const stateError = document.getElementById("stateError");
    const pincodeError = document.getElementById("pincodeError");
    const landmarkError = document.getElementById("landmarkError");
    const addphoneError = document.getElementById("addphoneError");
    const addressTypeError = document.getElementById("addressTypeError")

    addnameError.textContent = "";
    cityError.textContent = "";
    stateError.textContent = "";
    pincodeError.textContent = "";
    landmarkError.textContent = "";
    addphoneError.textContent = "";
    addressTypeError.textContent = "";


    let isValid = true;

    if (addname === "") {
      addnameError.textContent = "Field is Required"
      addnameError.style.color = "red";
      isValid = false
    }
    const cityRegex = /^[A-Za-z\s]+$/;
    if (city === "") {
      cityError.textContent = "Field is Required"
      cityError.style.color = "red";
      isValid = false
    }
    if (!cityRegex.test(city)) {
      cityError.textContent = "Enter valid city name"
      cityError.style.color = "red";
      isValid = false
    }
    if (state === "state") {
      stateError.textContent = "Select any state"
      stateError.style.color = "red";
      isValid = false
    }
    const pincodeRegex = /^\d{6}$/
    if (!pincodeRegex.test(pincode)) {
      pincodeError.textContent = "Enter Valid Pincode"
      pincodeError.style.color = "red";
      isValid = false
    }
    if (landmark === "") {
      landmarkError.textContent = "Field is Required"
      landmarkError.style.color = "red";
      isValid = false
    }
    const phoneRegex = /^\d{10}$/;
    if (!phoneRegex.test(addphone)) {
      addphoneError.textContent = "Please Enter a valid Phone Number";
      addphoneError.style.color = "red";
      isValid = false;
    }

    if (addressType === "--none--") {
      addressTypeError.textContent = "Select any Address Type"
      addressTypeError.style.color = "red";
      isValid = false
    }
    if (isValid) {
      try {
        const response = await fetch("/profile/add-address", {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            name: addname,
            city,
            state,
            pincode,
            landmark,
            phonenumber: addphone,
            addressType,

          })
        })
        const result = await response.json()
        if (result.success) {
          swal({
            title: "Success!",
            text: result.message,
            icon: "success",
            button: "OK"
          }).then(() => {
            window.location.href = '/checkout'
          })
        } else {
          swal({
            title: "Error",
            text: result.message,
            icon: "error",
            button: "Try again"
          })
        }
      }catch (error) {
        console.log("Error", error)
        swal({
          title: "Error",
          text: "An unexpected error occured",
          icon: "error",
          button: "ok"
        })
      }
    }
  })
  const inputs = ['addname', 'city', 'state', 'pincode', 'landmark', 'addphone', 'addressType'];

  inputs.forEach(inputId => {
    document.getElementById(inputId).addEventListener('input', function() {
      const error = document.getElementById(inputId + 'Error');
      error.textContent = '';
    });
  });
      </script>
       <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
       <script>
        document.getElementById('applyCouponBtn').addEventListener('click', function() {
          const couponSelect = document.getElementById('couponSelect');
          const selectedCoupon = couponSelect.options[couponSelect.selectedIndex];
      
          // Get coupon details
          const couponId = selectedCoupon.value;
          const discount = parseFloat(selectedCoupon.getAttribute('data-discount'));
          const minPrice = parseFloat(selectedCoupon.getAttribute('data-min-price'));
      
          if (couponId) {
            const subtotal = parseFloat('<%= totalAmount %>'); // Assuming you pass totalAmount to JS
            if (subtotal >= minPrice) {
              const discountAmount = discount;
              const finalAmount = subtotal - discountAmount;
      
              // Update the discount and total in the table
              document.getElementById('discountAmount').textContent = `₹${discountAmount}`;
              document.getElementById('finalAmount').textContent = `₹${finalAmount}`;
      
             
              fetch(`/apply-coupon`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ couponId, discountAmount, finalAmount })
              })
              .then(response => response.json())
              .then(data => {
                console.log('Coupon applied successfully:', data);
              })
              .catch(error => {
                console.error('Error applying coupon:', error);
              });
            } else {
              alert('Your subtotal is too low for this coupon.');
            }
          } else {
            alert('Please select a coupon.');
          }
        });
      </script>


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>






